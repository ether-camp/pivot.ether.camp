group 'com.ethercamp.pivot'
version '1.0-SNAPSHOT'

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.5.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'spring-boot'

repositories {

    mavenLocal()
    jcenter()

    mavenCentral()

    maven { url "https://oss.jfrog.org/libs-snapshot/" }
    maven { url "https://dl.bintray.com/ethereum/maven/" }
    maven { url "https://repo.spring.io/libs-snapshot" }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-devtools"

//    compile "com.google.guava:guava:19.0"

    compile "org.springframework:spring-context:4.2.0.BUILD-SNAPSHOT"

    compile "org.projectlombok:lombok:1.16.4"
    compile "org.apache.commons:commons-io:1.3.2"

    testCompile "junit:junit"
    testCompile "org.springframework:spring-test"
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

task stage {
    dependsOn bootRepackage
}

bootRun {
    systemProperties = System.properties

    def args = ["-server", "-Xss32m",
                "-XX:+UseCompressedOops",
                "-XX:+HeapDumpOnOutOfMemoryError",
                "-XX:-OmitStackTraceInFastThrow",
                "-Djava.net.preferIPv4Stack=true"]
    if ( project.hasProperty('jvmArgs') ) {
        args.addAll(project.jvmArgs.split('\\s+'))
    }

    jvmArgs = args

    addResources = true
}

springBoot {
    mainClass = "com.ethercamp.harmony.Application"
}

sourceCompatibility=1.8

// to keep method arguments names in bytecode
// used for terminal code completion
[compileJava, compileTestJava]*.options*.compilerArgs = ['-parameters']


task runMorden (type: JavaExec) {
    main = "com.ethercamp.harmony.Application"
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs = [] + '-Dethereumj.conf.res=morden.conf'
}